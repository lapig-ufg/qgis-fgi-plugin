# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GlobalInspectionTiles
                                 A QGIS plugin
 This plugin is for classifying samples of pastures areas.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-06-20
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Tharles de Sousa Andrade | LAPIG - UFG
        email                : irtharles@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from datetime import datetime
from os.path import expanduser, exists

import requests as req
from qgis.core import (
    Qgis,
    QgsFillSymbol,
    QgsProject,
    QgsRasterLayer,
    QgsVectorLayer,
)
from qgis.PyQt.QtCore import QCoreApplication, QSettings, Qt, QTranslator
from qgis.PyQt.QtGui import QIcon, QPixmap
from qgis.PyQt.QtWidgets import (
    QAbstractScrollArea,
    QAction,
    QApplication,
    QFileDialog,
    QMessageBox,
    QScrollArea,
    QVBoxLayout,
)

from .global_inspection_dockwidget import GlobalInspectionTilesDockWidget

# Initialize Qt resources from file resources.py
from .resources import *
from .sources import connections
from .src.inspections import InspectionController
from .src.models.entities import initDb


class GlobalInspectionTiles:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GlobalInspectionTiles_{}.qm'.format(locale),
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr('&Global Inspection Tiles')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar('GlobalInspectionTiles')
        self.toolbar.setObjectName('GlobalInspectionTiles')
        self.pluginSend2Google = None

        # print "** INITIALIZING GlobalInspectionTiles"
        self.plugin_is_active = False
        self.dock_widget = None
        self.scroll_area = None
        self.tiles_layer = None
        self.work_dir = None
        self.canvas = None
        self.root = None
        self.group = None
        self.tiles = None
        self.type_inspection = None
        self.current_tile_index = 0
        self.selected_class_bing = None
        self.selected_class_google = None
        self.current_pixels_layer = None
        self.inspection_controller = None
        self.campaigns_config = None
        self.layer_bing = None
        self.layer_google = None
        self.config = initDb()
        self.scroll = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GlobalInspectionTiles', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/global_inspection/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('Inspect Tiles'),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

    # --------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dock_widget is closed"""

        # print "** CLOSING GlobalInspectionTiles"
        QgsProject.instance().clear()
        self.dock_widget.fieldFileName.setText('')
        self.dock_widget.interpreterName.setText('')
        self.dock_widget.fieldWorkingDirectory.setText('')
        self.dock_widget.imageDate.clear()
        self.iface.actionPan().trigger()

        # disconnects
        self.dock_widget.closingPlugin.disconnect(self.onClosePlugin)
        self.remove_files_with_extension('/datasource', '.gpkg')

        # remove this statement if dock_widget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        self.dock_widget = None

        self.plugin_is_active = False

    def remove_files_with_extension(self, directory, extension):
        directory = os.path.dirname(__file__) + directory
        for filename in os.listdir(directory):
            if filename.endswith(extension):
                file_path = os.path.join(directory, filename)
                os.remove(file_path)
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        # print "** UNLOAD GlobalInspectionTiles"

        for action in self.actions:
            self.iface.removePluginMenu(self.tr('&Inspection Tiles'), action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    # --------------------------------------------------------------------------
    def open_google_satellite(self):

        url = 'https://mt1.google.com/vt/lyrs=s&x=%7Bx%7D&y=%7By%7D&z=%7Bz%7D'
        service_url = url.replace('=', '%3D').replace('&', '%26')
        qgis_tms_uri = 'type=xyz&zmin={0}&zmax={1}&url={2}'.format(
            0, 19, service_url
        )

        layer = QgsRasterLayer(qgis_tms_uri, 'Google', 'wms')
        self.layer_google = layer
        if layer.isValid():
            QgsProject.instance().addMapLayer(layer)
            QgsProject.instance().layerTreeRoot().findLayer(
                layer.id()
            ).setItemVisibilityChecked(False)
        else:
            print('Layer failed to load!')

    def open_bing_satellite(self):

        url = 'http://ecn.t3.tiles.virtualearth.net/tiles/a{q}.jpeg?g=1'

        qgis_tms_uri = 'type=xyz&zmin={0}&zmax={1}&url={2}'.format(0, 19, url)

        layer = QgsRasterLayer(qgis_tms_uri, 'Bing', 'wms')
        self.layer_bing = layer

        if layer.isValid():
            QgsProject.instance().addMapLayer(layer)
            QgsProject.instance().layerTreeRoot().findLayer(
                layer.id()
            ).setItemVisibilityChecked(False)
        else:
            print('Layer failed to load!')

    def get_config(self, key):
        """Load config file and get value of key"""
        return getattr(self.config, key)

    def set_config(self, key, value):
        """Write config in config file"""
        setattr(self.config, key, value)
        self.config.save()

    def load_type_inspections(self):
        """Load campaigns from service: https://ows.lapig.iesa.ufg.br/api/global-pasture/campaigns"""
        resp = req.get(
            'https://ows.lapig.iesa.ufg.br/api/global-pasture/campaigns'
        )
        self.campaigns_config = resp.json()[0]

    def config_tiles(self):
        tile = self.tiles[self.current_tile_index]
        self.dock_widget.tileInfoBing.setText(
            f'Tile {self.current_tile_index + 1} of {len(self.tiles)}'
        )
        self.dock_widget.tileInfoGoogle.setText(
            f'Tile {self.current_tile_index + 1} of {len(self.tiles)}'
        )

        self.inspection_controller.create_grid_pixels(tile)
        self.dock_widget.lblSearch.setVisible(True)
        self.dock_widget.spinSearch.setVisible(True)
        self.dock_widget.btnSearch.setVisible(True)
        self.dock_widget.spinSearch.setMaximum(999999999)

    def load_tiles(self):
        QApplication.instance().setOverrideCursor(Qt.BusyCursor)
        """Load tiles from layer"""
        instance = QgsProject.instance()
        open_layers = [layer for layer in instance.mapLayers().values()]
        for layer in open_layers:
            if layer.name() == 'tiles':
                self.tiles = [f.attributes() for f in layer.getFeatures()]
        QApplication.instance().setOverrideCursor(Qt.ArrowCursor)

    def open_tiles_file(self, from_config=False):
        QApplication.instance().setOverrideCursor(Qt.BusyCursor)

        """Open Tiles file Dialog"""

        if from_config:
            layer_path = self.get_config('filePath')
            self.dock_widget.tabWidget.setCurrentIndex(1)
            self.current_tile_index = self.get_config('currentTileIndex')
        else:
            layer_path = str(
                QFileDialog.getOpenFileName(
                    caption='Escolha o arquivo com os tiles',
                    filter='Geopackage (*gpkg)',
                )[0]
            )
        if layer_path != '' and exists(layer_path):
            self.tiles_layer = QgsVectorLayer(layer_path, 'tiles', 'ogr')
            symbol = QgsFillSymbol.createSimple(
                {
                    'color': '0,0,0,0',
                    'color_border': 'red',
                    'width_border': '0.5',
                    'style': 'dashed_line',
                }
            )
            self.tiles_layer.renderer().setSymbol(symbol)
            self.dock_widget.fieldFileName.setText(layer_path)
            QgsProject.instance().addMapLayer(self.tiles_layer)
            self.iface.setActiveLayer(self.tiles_layer)
            self.iface.zoomToActiveLayer()
            self.load_tiles()
            self.set_config(key='filePath', value=layer_path)

            if from_config:
                self.config_tiles()

            return True

        else:
            self.iface.messageBar().pushMessage(
                'ERROR READ FILE',
                'Tiles GPKG not found',
                level=Qgis.Critical,
                duration=5,
            )
            QApplication.instance().setOverrideCursor(Qt.ArrowCursor)
            return False
        QApplication.instance().setOverrideCursor(Qt.ArrowCursor)

    def get_dir_path(self, from_config=False):
        if from_config:
            directory = self.get_config('workingDirectory')
        else:
            directory = QFileDialog.getExistingDirectory(
                self.dock_widget,
                'Select Directory',
                expanduser('~'),
                QFileDialog.ShowDirsOnly,
            )
            self.dock_widget.btnInitInspections.setVisible(True)
        self.dock_widget.fieldWorkingDirectory.setText(directory)
        self.set_config(key='workingDirectory', value=directory)

    def load_classes(self):
        image_date = self.dock_widget.imageDate.date()

        if not self.inspection_controller.date_is_valid(
            image_date.toString('yyyy-MM-dd')
        ):
            image_date = None

        if not image_date:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Question)
            msg.setText('The image date is required to classify this tile!')
            msg.setInformativeText(
                'If the image date was not found, the tile would be ignored. Do you confirm the missing date of the image?'
            )
            msg.setWindowTitle('INSPECTION TILES')
            msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
            retval = msg.exec_()
            if retval == 16384:
                self.inspection_controller.init_inspection_tile(
                    no_image_date=True
                )
        else:
            if self.get_config('imageSource') == 'BING':
                self.dock_widget.labelClassBing.setVisible(True)
                self.dock_widget.selectedClassBing.setVisible(True)
            else:
                self.dock_widget.btnNext.setVisible(True)
                self.dock_widget.importBingClassification.setVisible(True)
                self.dock_widget.labelClassGoogle.setVisible(True)
                self.dock_widget.selectedClassGoogle.setVisible(True)

            self.inspection_controller.init_inspection_tile()

    def init_inspections(self):
        interpreter_name = self.dock_widget.interpreterName.text()

        if interpreter_name != '':
            QApplication.instance().setOverrideCursor(Qt.BusyCursor)

            self.config_tiles()
            self.set_config(
                key='interpreterName', value=interpreter_name.upper()
            )
            self.dock_widget.btnInitInspections.setVisible(False)

            if self.get_config('imageSource') == 'BING':
                self.dock_widget.tabWidget.setTabEnabled(1, True)
                self.dock_widget.tabWidget.setCurrentIndex(1)

            else:
                self.dock_widget.tabWidget.setTabEnabled(2, True)
                self.dock_widget.tabWidget.setCurrentIndex(2)

        else:
            self.iface.messageBar().pushMessage(
                '',
                f'The name of interpreter is required!',
                level=Qgis.Critical,
                duration=5,
            )

    def run(self):
        """Run method that loads and starts the plugin"""
        if not self.plugin_is_active:
            # print "** STARTING GlobalInspectionTiles"

            # dock_widget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dock_widget is None:
                # Create the dock_widget (after translation) and keep reference
                self.dock_widget = GlobalInspectionTilesDockWidget()

            self.dock_widget.btnPointDate.setIcon(
                QIcon(os.path.dirname(__file__) + '/img/copy-point.png')
            )
            self.dock_widget.btnClearSelectionBing.setIcon(
                QIcon(os.path.dirname(__file__) + '/img/delete.png')
            )
            self.dock_widget.btnClearSelectionGoogle.setIcon(
                QIcon(os.path.dirname(__file__) + '/img/delete.png')
            )
            self.dock_widget.logo.setPixmap(
                QPixmap(os.path.dirname(__file__) + '/img/logo-plugin.png')
            )
            self.dock_widget.btnNext.setIcon(
                QIcon(os.path.dirname(__file__) + '/img/save.png')
            )
            self.iface.actionPan().trigger()

            connections.xyz(self)
            self.inspection_controller = InspectionController(self)

            self.work_dir = (
                str.split(__file__, 'global_inspection.py')[0] + 'datasource'
            )
            self.plugin_is_active = True
            self.canvas = self.iface.mapCanvas()

            QgsProject.instance().clear()

            self.dock_widget.btnInitInspections.setVisible(False)
            self.dock_widget.btnClearSelectionBing.setVisible(False)
            self.dock_widget.btnClearSelectionGoogle.setVisible(False)
            self.dock_widget.btnLoadClasses.setVisible(False)
            self.dock_widget.tabWidget.setTabEnabled(1, False)
            self.dock_widget.tabWidget.setTabEnabled(2, False)
            self.dock_widget.tabWidget.setTabEnabled(3, False)
            self.dock_widget.labelClassBing.setVisible(False)
            self.dock_widget.labelClassGoogle.setVisible(False)
            self.dock_widget.selectedClassBing.setVisible(False)
            self.dock_widget.selectedClassGoogle.setVisible(False)
            self.dock_widget.classesBing.setVisible(False)
            self.dock_widget.classesGoogle.setVisible(False)
            self.dock_widget.importBingClassification.setVisible(False)
            self.dock_widget.btnFinishBing.setVisible(False)
            self.dock_widget.bingStartDate.setEnabled(False)
            self.dock_widget.btnNext.setVisible(False)
            self.dock_widget.btnNext.setEnabled(False)
            self.dock_widget.bingEndDate.setEnabled(False)
            self.dock_widget.imageDate.setMaximumDateTime(datetime.now())
            self.dock_widget.lblSearch.setVisible(False)
            self.dock_widget.spinSearch.setVisible(False)
            self.dock_widget.btnSearch.setVisible(False)

            self.load_type_inspections()
            self.open_google_satellite()
            self.open_bing_satellite()

            file = self.get_config('filePath')

            if file != '':
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Question)
                msg.setText('Do you want to start a new inspection?')
                msg.setWindowTitle('INSPECTION TILES')
                msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
                QApplication.instance().setOverrideCursor(Qt.ArrowCursor)
                retval = msg.exec_()
                # 65536 -> No | 16384 -> Yes
                if retval == 16384:
                    self.dock_widget.btnFile.setEnabled(True)
                    self.dock_widget.btnWorkingDirectory.setEnabled(True)
                    self.dock_widget.interpreterName.setEnabled(True)
                    self.dock_widget.tabWidget.setCurrentIndex(0)
                    self.set_config(key='currentTileIndex', value=0)
                    self.set_config(key='filePath', value='')
                    self.set_config(key='workingDirectory', value='')
                    self.set_config(key='interpreterName', value='')
                    self.set_config(key='imageSource', value='BING')
                else:
                    self.get_dir_path(from_config=True)
                    if not self.open_tiles_file(from_config=True):
                        return
                    self.dock_widget.interpreterName.setText(
                        self.get_config('interpreterName').upper()
                    )
                    self.dock_widget.tabWidget.setTabEnabled(1, True)
                    self.dock_widget.tabWidget.setTabEnabled(2, True)

                    self.set_config(key='imageSource', value='BING')
                    self.inspection_controller.on_change_tab(1)

                    self.dock_widget.interpreterName.setEnabled(False)
                    self.dock_widget.btnFile.setEnabled(False)
                    self.dock_widget.btnWorkingDirectory.setEnabled(False)
                    self.dock_widget.btnInitInspections.setVisible(False)

            self.dock_widget.btnFile.clicked.connect(self.open_tiles_file)
            self.dock_widget.btnWorkingDirectory.clicked.connect(
                self.get_dir_path
            )
            self.dock_widget.btnClearSelectionBing.clicked.connect(
                self.inspection_controller.remove_selection
            )
            self.dock_widget.btnClearSelectionGoogle.clicked.connect(
                self.inspection_controller.remove_selection
            )
            self.dock_widget.btnInitInspections.clicked.connect(
                self.init_inspections
            )
            self.dock_widget.btnLoadClasses.clicked.connect(self.load_classes)
            self.dock_widget.btnFinishBing.clicked.connect(
                self.inspection_controller.start_inspection_google
            )
            self.dock_widget.tabWidget.currentChanged.connect(
                self.inspection_controller.on_change_tab
            )
            self.dock_widget.sameImage.toggled.connect(
                self.inspection_controller.set_same_image
            )
            self.dock_widget.importBingClassification.clicked.connect(
                self.inspection_controller.import_classes_bing
            )

            # connect to provide cleanup on closing of dock_widget
            self.dock_widget.closingPlugin.connect(self.onClosePlugin)

            # add scroll

            scroll_tab = QScrollArea()
            scroll_tab.setSizeAdjustPolicy(
                QAbstractScrollArea.AdjustToContents
            )
            self.dock_widget.tabWidget.setMinimumHeight(750)
            scroll_tab.setWidget(self.dock_widget.tabWidget)

            self.dock_widget.gridMain.addWidget(scroll_tab)

            # show the dock_widget
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dock_widget)
            self.dock_widget.show()
